{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AutoQuant AutoQuant is an out-of-the-box quantitative investment platform. It contains the full ML pipeline of data processing, strategy building(includes AI & traditionals), back-testing, and covers the entire chain of quantitative investment: alpha seeking, risk modeling, portfolio optimization, and order execution. With AutoQuant, users can easily try ideas to create better Quant investment strategies.","title":"Home"},{"location":"#autoquant","text":"AutoQuant is an out-of-the-box quantitative investment platform. It contains the full ML pipeline of data processing, strategy building(includes AI & traditionals), back-testing, and covers the entire chain of quantitative investment: alpha seeking, risk modeling, portfolio optimization, and order execution. With AutoQuant, users can easily try ideas to create better Quant investment strategies.","title":"AutoQuant"},{"location":"advanced/","text":"Advanced Topics Market AutoQuant support Shanghai, Shenzhen, HongKong and US markets now. Use Market Enum in codes: from autoquant import Market Market.SZ Market.SH Market.HK Market.CN Market.US Index AutoQuant support the indexes in multiple markets now. Use StocksIndex Enum in codes: from autoquant import StocksIndex StocksIndex.ZZ500 StocksIndex.HS300 StocksIndex.SZ50 Use FundsIndex Enum in codes: from autoquant import FundsIndex FundsIndex.CN_ALL FundsIndex.CN_ETF FundsIndex.CN_QDII FundsIndex.HUAXIA_SECTOR_ETF Indicators World Quant Alpha 101 From the paper <101 Formulaic Alphas>: https://arxiv.org/ftp/arxiv/papers/1601/1601.00991.pdf WQA1: (rank(Ts_ArgMax(SignedPower(((returns < 0) ? stddev(returns, 20) : close), 2.), 5)) - 0.5) WQA2: (-1 * correlation(rank(delta(log(volume), 2)), rank(((close - open) / open)), 6)) ... Specific Indicators ParityIndex AdjustedMomentum Backtrader Indicators All the indicators in Backtrader are available in AutoQuant. For Example, if you were using the indicators of Backtrader like this: from backtrader.indicators import Momentum You can simply change the import sentence to use the indicators in AutoQuant. The codes would be: from autoquant.indicators import Momentum Metrics Specific Metrics Gross Rate Of Return CAGR(Compound Annual Growth Rate) TA-Lib Metrics All the metrics in TA-Lib are available in AutoQuant. For Example, if you were using the metrics of TA-Lib like this: from talib import SMA close = numpy.random.random(100) output = MOM(close, timeperiod=5) You can simply change the import sentence to use the metrics in AutoQuant. The codes would be: from AutoQuant import SMA close = numpy.random.random(100) output = MOM(close, timeperiod=5) Providers Price Provider Provides List BaostockProvider TushareProvider EastmoneyProvider LocalProvider API def daily_prices(self, market: Market, code: str, start: date, end: date, **kwargs) Financial Statement Provider Provides List SnowballProvider API def quarter_statement(self, market: Market, code: str, quarter: date, **kwargs) def yearly_balance_sheet(self, market: Market, code: str, years: list, **kwargs) def yearly_income_sheets(self, market: Market, code: str, years: list, **kwargs) def yearly_flow_sheets(self, market: Market, code: str, years: list, **kwargs) Index Provider Provides List BaostockProvider EastmoneyProvider API def stocks_of_index(self, index: StocksIndex, **kwargs) def funds_of_index(self, index: FundsIndex, **kwargs)","title":"Advanced Topics"},{"location":"advanced/#advanced-topics","text":"","title":"Advanced Topics"},{"location":"advanced/#market","text":"AutoQuant support Shanghai, Shenzhen, HongKong and US markets now. Use Market Enum in codes: from autoquant import Market Market.SZ Market.SH Market.HK Market.CN Market.US","title":"Market"},{"location":"advanced/#index","text":"AutoQuant support the indexes in multiple markets now. Use StocksIndex Enum in codes: from autoquant import StocksIndex StocksIndex.ZZ500 StocksIndex.HS300 StocksIndex.SZ50 Use FundsIndex Enum in codes: from autoquant import FundsIndex FundsIndex.CN_ALL FundsIndex.CN_ETF FundsIndex.CN_QDII FundsIndex.HUAXIA_SECTOR_ETF","title":"Index"},{"location":"advanced/#indicators","text":"","title":"Indicators"},{"location":"advanced/#world-quant-alpha-101","text":"From the paper <101 Formulaic Alphas>: https://arxiv.org/ftp/arxiv/papers/1601/1601.00991.pdf WQA1: (rank(Ts_ArgMax(SignedPower(((returns < 0) ? stddev(returns, 20) : close), 2.), 5)) - 0.5) WQA2: (-1 * correlation(rank(delta(log(volume), 2)), rank(((close - open) / open)), 6)) ...","title":"World Quant Alpha 101"},{"location":"advanced/#specific-indicators","text":"ParityIndex AdjustedMomentum","title":"Specific Indicators"},{"location":"advanced/#backtrader-indicators","text":"All the indicators in Backtrader are available in AutoQuant. For Example, if you were using the indicators of Backtrader like this: from backtrader.indicators import Momentum You can simply change the import sentence to use the indicators in AutoQuant. The codes would be: from autoquant.indicators import Momentum","title":"Backtrader Indicators"},{"location":"advanced/#metrics","text":"","title":"Metrics"},{"location":"advanced/#specific-metrics","text":"Gross Rate Of Return CAGR(Compound Annual Growth Rate)","title":"Specific Metrics"},{"location":"advanced/#ta-lib-metrics","text":"All the metrics in TA-Lib are available in AutoQuant. For Example, if you were using the metrics of TA-Lib like this: from talib import SMA close = numpy.random.random(100) output = MOM(close, timeperiod=5) You can simply change the import sentence to use the metrics in AutoQuant. The codes would be: from AutoQuant import SMA close = numpy.random.random(100) output = MOM(close, timeperiod=5)","title":"TA-Lib Metrics"},{"location":"advanced/#providers","text":"","title":"Providers"},{"location":"advanced/#price-provider","text":"","title":"Price Provider"},{"location":"advanced/#provides-list","text":"BaostockProvider TushareProvider EastmoneyProvider LocalProvider","title":"Provides List"},{"location":"advanced/#api","text":"def daily_prices(self, market: Market, code: str, start: date, end: date, **kwargs)","title":"API"},{"location":"advanced/#financial-statement-provider","text":"","title":"Financial Statement Provider"},{"location":"advanced/#provides-list_1","text":"SnowballProvider","title":"Provides List"},{"location":"advanced/#api_1","text":"def quarter_statement(self, market: Market, code: str, quarter: date, **kwargs) def yearly_balance_sheet(self, market: Market, code: str, years: list, **kwargs) def yearly_income_sheets(self, market: Market, code: str, years: list, **kwargs) def yearly_flow_sheets(self, market: Market, code: str, years: list, **kwargs)","title":"API"},{"location":"advanced/#index-provider","text":"","title":"Index Provider"},{"location":"advanced/#provides-list_2","text":"BaostockProvider EastmoneyProvider","title":"Provides List"},{"location":"advanced/#api_2","text":"def stocks_of_index(self, index: StocksIndex, **kwargs) def funds_of_index(self, index: FundsIndex, **kwargs)","title":"API"},{"location":"contribution/","text":"Contribution Guide Test Test all PYTHONPATH=./ pytest Test specified test PYTHONPATH=./ pytest tests/<YOUR_DISIRE_FILE>.py -k \"<YOUR_DISIRE_TEST_CASE>\" -s Development Generate Requirements pipreqs ./ --encoding=utf8 --force Package Update python3 -m build python3 -m twine upload dist/*","title":"Contribution"},{"location":"contribution/#contribution-guide","text":"","title":"Contribution Guide"},{"location":"contribution/#test","text":"","title":"Test"},{"location":"contribution/#test-all","text":"PYTHONPATH=./ pytest","title":"Test all"},{"location":"contribution/#test-specified-test","text":"PYTHONPATH=./ pytest tests/<YOUR_DISIRE_FILE>.py -k \"<YOUR_DISIRE_TEST_CASE>\" -s","title":"Test specified test"},{"location":"contribution/#development","text":"","title":"Development"},{"location":"contribution/#generate-requirements","text":"pipreqs ./ --encoding=utf8 --force","title":"Generate Requirements"},{"location":"contribution/#package-update","text":"python3 -m build python3 -m twine upload dist/*","title":"Package Update"},{"location":"quick_start/","text":"Quick Start Installation pip install --upgrade autoquant Data Preparation from autoquant.collector import Collector from autoquant import Market from datetime import date collector = Collector.default() data = collector.daily_prices( market=Market.SZ, code='002594', start=date(2021, 11, 1), end=date(2021, 11, 5) ) data = collector.quarter_statement( market=Market.SH, code='601318', quarter=date(2021, 9, 30) ) Backtest from autoquant.collector import Collector from autoquant.workflow import Workflow from autoquant.broker import Broker from autoquant import Market from datetime import date from autoquant.workflow import Workflow from autoquant.strategy import MA_CrossOver class SmaCross(MA_CrossOver): params = dict(fast=5, slow=20) collector = Collector.default() broker = Broker.default(kick_start=100000, commission=0.01) data = collector.daily_prices(market=Market.SZ, code='002594', start=date(2020, 1, 1), end=date(2021, 11, 1)) w = Workflow().with_broker(broker).with_strategy(SmaCross).backtest(data) w.visualize()","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"","title":"Quick Start"},{"location":"quick_start/#installation","text":"pip install --upgrade autoquant","title":"Installation"},{"location":"quick_start/#data-preparation","text":"from autoquant.collector import Collector from autoquant import Market from datetime import date collector = Collector.default() data = collector.daily_prices( market=Market.SZ, code='002594', start=date(2021, 11, 1), end=date(2021, 11, 5) ) data = collector.quarter_statement( market=Market.SH, code='601318', quarter=date(2021, 9, 30) )","title":"Data Preparation"},{"location":"quick_start/#backtest","text":"from autoquant.collector import Collector from autoquant.workflow import Workflow from autoquant.broker import Broker from autoquant import Market from datetime import date from autoquant.workflow import Workflow from autoquant.strategy import MA_CrossOver class SmaCross(MA_CrossOver): params = dict(fast=5, slow=20) collector = Collector.default() broker = Broker.default(kick_start=100000, commission=0.01) data = collector.daily_prices(market=Market.SZ, code='002594', start=date(2020, 1, 1), end=date(2021, 11, 1)) w = Workflow().with_broker(broker).with_strategy(SmaCross).backtest(data) w.visualize()","title":"Backtest"}]}